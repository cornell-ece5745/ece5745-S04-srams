#!/usr/bin/env python
#=========================================================================
# sram-sim [options]
#=========================================================================
#
#  -h --help           Display this message
#
#  --impl              {rtl}
#  --input <dataset>   {random, allzero, allone}
#  --trace             Display line tracing
#  --stats             Display statistics
#  --translate         Translate RTL model to Verilog
#  --dump-vcd          Dump VCD to sort-<impl>-<input>.vcd
#
# Author : Christopher Batten
# Date   : February 5, 2015
#

# Hack to add project root to python path

import os
import sys

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + ".pymtl_sim_root" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re
import random

from pymtl3                            import *
from pymtl3.stdlib.test                import config_model
from pymtl3.passes.backends.verilog    import VerilogPlaceholderPass

from tut8_sram.SramMinionRTL           import SramMinionRTL
from tut8_sram.test.SramMinionRTL_test import random_msgs, allN_msgs, TestHarness

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--impl", default="rtl",
                  choices=["rtl"] )
  p.add_argument( "--input", default="random",
                  choices=["random","allzero","allone"] )

  p.add_argument( "--trace",     action="store_true" )
  p.add_argument( "--stats",     action="store_true" )
  p.add_argument( "--translate", action="store_true" )
  p.add_argument( "--dump-vcd",  action="store_true" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

def main():
  opts = parse_cmdline()

  # Create input datasets

  inputs = None

  if   opts.input == "random":
    inputs = random_msgs()
  elif opts.input == "allzero":
    inputs = allN_msgs( num=0x0 )
  elif opts.input == "allone":
    inputs = allN_msgs( num=0xffffffffffffffff )

  # Instantiate the model

  model_impl_dict = {
    'rtl' : SramMinionRTL,
  }

  model = model_impl_dict[ opts.impl ]

  # Create VCD filename

  if opts.dump_vcd:
    vcd_file_name = f"sram-{opts.impl}-{opts.input}"
  else:
    vcd_file_name = ""

  # Create test harness (we can reuse the harness from unit testing)

  th = TestHarness( model_impl_dict[ opts.impl ]() )

  th.set_param("top.src.construct",  msgs=inputs[::2]  )
  th.set_param("top.sink.construct", msgs=inputs[1::2] )

  # Configure the test harness component

  config_model( th, vcd_file_name, opts.translate, ['sram'] )

  # Setup the test harness

  th.elaborate()

  # Apply placeholder pass

  th.apply( VerilogPlaceholderPass() )

  # We can call apply if we are 100% sure the top level is not tagged

  th.apply( TranslationImportPass() )

  # Create a simulator

  th.apply( SimulationPass() )

  # Reset test harness

  th.sim_reset( print_line_trace=opts.trace )

  # 2 cycles to reset

  ncycles = 2

  # Run simulation

  while not th.done():
    if opts.trace:
      th.print_line_trace()

    th.tick()
    ncycles += 1

  # Extra ticks to make VCD easier to read

  th.tick()
  th.tick()
  th.tick()

main()

