#=========================================================================
# SRAM RTL with custom low-level interface
#=========================================================================
# This is the SRAM RTL model with our own low-level interface. It contains
# an instance of either a SRAM generated by OpenRAM memory compiler or a
# This is the SRAM RTL model with our own low-level interfacegeneric
# SRAM RTL model (SramGenericPRTL).
#
# The interface of this module are prefixed by port0_, meaning all reads
# and writes happen through the only port. Multiported SRAMs have ports
# prefixed by port1_, port2_, etc.
#
# The following list describes each port of this module.
#
#  Port Name     Direction  Description
#  -----------------------------------------------------------------------
#  port0_val     I          port enable (1 = enabled)
#  port0_type    I          transaction type, 0 = read, 1 = write
#  port0_idx     I          index
#  port0_wdata   I          write data
#  port0_rdata   O          read data output
#

from pymtl3           import *
from .SramGenericPRTL import SramGenericPRTL
from .SRAM_32x256_1P  import SRAM_32x256_1P
from .SRAM_128x256_1P import SRAM_128x256_1P

# ''' TUTORIAL TASK '''''''''''''''''''''''''''''''''''''''''''''''''''''
# Import new SRAM configuration RTL model
# '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\/

from .SRAM_64x64_1P   import SRAM_64x64_1P

# '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''/\

class SramPRTL( Component ):

  def construct( s, data_nbits=32, num_entries=256 ):

    idx_nbits = clog2( num_entries )      # address width
    nbytes    = int( data_nbits + 7 ) // 8 # $ceil(data_nbits/8)

    s.port0_val   = InPort ()
    s.port0_type  = InPort ()
    s.port0_idx   = InPort ( mk_bits(idx_nbits) )
    s.port0_wdata = InPort ( mk_bits(data_nbits) )
    s.port0_rdata = OutPort( mk_bits(data_nbits) )

    # Inverters

    s.port0_val_bar  = Wire()
    s.port0_type_bar = Wire()

    s.port0_val_bar  //= lambda: ~s.port0_val
    s.port0_type_bar //= lambda: ~s.port0_type

    # if you have implemented a new SRAM, make sure use it
    # here instead of the generic one.

    if   data_nbits == 32 and num_entries == 256:
      s.sram = SRAM_32x256_1P()
    elif data_nbits == 128 and num_entries == 256:
      s.sram = SRAM_128x256_1P()

    # ''' TUTORIAL TASK '''''''''''''''''''''''''''''''''''''''''''''''''
    # Choose new SRAM configuration RTL model
    # '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\/

    elif data_nbits == 64 and num_entries == 64:
      s.sram = SRAM_64x64_1P()

    # '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''/\

    else:
      s.sram = SramGenericPRTL( data_nbits, num_entries )

    s.sram.CE1  //= s.clk
    s.sram.CSB1 //= s.port0_val_bar  # CSB1 low-active
    s.sram.OEB1 //= 0
    s.sram.WEB1 //= s.port0_type_bar # WEB1 low-active
    s.sram.A1   //= s.port0_idx
    s.sram.I1   //= s.port0_wdata
    s.sram.O1   //= s.port0_rdata

  def line_trace( s ):
    return "(A1={} I1={} O1={})".format( s.sram.A1, s.sram.I1, s.sram.O1 )
